% ffuf, fuzzing
# Directory discovery
ffuf -w <wordlist> -u https://<target>/FUZZ

# Adding classical header (some WAF bypass)
ffuf -c -w "/opt/host/main.txt:FILE" -H "X-Originating-IP: 127.0.0.1, X-Forwarded-For: 127.0.0.1, X-Remote-IP: 127.0.0.1, X-Remote-Addr: 127.0.0.1, X-Client-IP: 127.0.0.1" -fs 5682,0 -u https://<target>/FUZZ

# match all responses but filter out those with content-size
ffuf -w <wordlist.txt> -u https://<target>/FUZZ -mc all -fs <content-size> -c -v

# Fuzz Host-header, match HTTP responses.
ffuf -w <hosts.txt> -u https://<target>/ -H "Host: FUZZ" -mc <response>

# Virtual host discovery (without DNS records)
ffuf -w <vhost/wordlist> -u https://<target> -H "Host: FUZZ" -fs <content-size>

# Playing with threads and wait
./ffuf -u https://<target>/FUZZ -w <wordlist.txt> -c -p <wait time> -t <threads>

# GET param fuzzing, filtering for invalid response size (or whatever)
ffuf -w <paramnames.txt> -u https://<target>/script.php?FUZZ=<test_value> -fs 4242

# GET parameter fuzzing if the param is known (fuzzing values) and filtering out response codes
ffuf -w <values.txt> -u https://<target>/<page>?<paramiter>=FUZZ -fc <exclude code>

# POST parameter fuzzing
ffuf -w <postdata.txt> -X POST -d "username=<username>\&password=FUZZ" -u https://<target>/<login-page> -fc <exclude code>

# Fuzz POST JSON data. Match all responses not containing text.
ffuf -w <entries.txt> -u https://<target>/ -X POST -H "Content-Type: <MIME-Type>" -d '{"name": "FUZZ", "<anotherkey>": "<anothervalue>"}' -fr <inverse match text>

# Recursive
ffuf -w <wordlist> -u https://<target>/FUZZ -maxtime-job <max-job-time> -recursion -recursion-depth <depth>
